// Generated by CoffeeScript 1.3.3
(function() {
  var BANNER, ctsjs, formatOutput, fs, jquery, jsdom, optimist, path, prettyjson, printLine, printWarn, pullDataFromString, pullDataFromUrl, request, usage;

  fs = require('fs');

  path = require('path');

  jsdom = require('jsdom');

  request = require('request');

  prettyjson = require('prettyjson');

  optimist = require('optimist');

  lib = path.dirname(fs.realpathSync(__filename));
 
  jquery = fs.readFileSync(lib + "/jquery.js").toString();

  ctsjs = fs.readFileSync(lib + "/cts.js").toString();

  printLine = function(line) {
    return process.stdout.write(line + '\n');
  };

  printWarn = function(line) {
    return process.stderr.write(line + '\n');
  };

  BANNER = 'Usage: dscrape cts-file url ';

  exports.run = function() {
    var argv, ctsContent, ctsFilename, ctsSheets, handleOutput, url,
      _this = this;
    argv = optimist.usage("Usage: $0 <CTS FILE> <URL> [--format fmt] [--verbose]").argv;
    if (argv._.length < 2) {
      printWarn("Must provide CTS File and URL as first two arguments.");
      optimist.showHelp();
      return false;
    }
    ctsFilename = argv._[0];
    url = argv._[1];
    if (argv.verbose != null) {
      console.log("CTS File: " + ctsFilename);
      console.log("URL: " + url);
    }
    ctsContent = fs.readFileSync(ctsFilename).toString();
    ctsSheets = [ctsContent];
    handleOutput = function(data) {
      var formatted;
      formatted = formatOutput(data, argv.format);
      return printLine(formatted);
    };
    return pullDataFromUrl(url, ctsSheets, argv.verbose != null, handleOutput);
  };

  formatOutput = function(data, format) {
    if (format != null) {
      if (format === "pretty") {
        return prettyjson.render(data);
      } else if (format === "json") {
        return JSON.stringify(data);
      }
    } else {
      return prettyjson.render(data);
    }
  };

  pullDataFromUrl = function(url, ctsSheets, verbose, scraped) {
    return request({
      uri: url
    }, function(error, response, body) {
      if (error && response.statusCode !== 200) {
        printWarn("Error contacting " + url);
        return {};
      }
      return pullDataFromString(body, ctsSheets, verbose, scraped);
    });
  };

  pullDataFromString = function(str, ctsSheets, verbose, scraped) {
    var data;
    data = {};
    return jsdom.env({
      html: str,
      src: [jquery, ctsjs],
      done: function(err, window) {
        var blocks, engine, sheet, _i, _len;
        engine = new window.CTS.Engine();
        for (_i = 0, _len = ctsSheets.length; _i < _len; _i++) {
          sheet = ctsSheets[_i];
          blocks = window.CTS.Parser.parseBlocks(sheet);
          engine.rules._incorporateBlocks(blocks);
        }
        if (verbose) {
          console.log("Blocks");
          console.log("------");
          console.log("");
          printLine(prettyjson.render(engine.rules.blocks));
          console.log("");
          console.log("");
          console.log("Data");
          console.log("----");
          console.log("");
        }
        data = engine.recoverData(window.jQueryHcss('html'));
        return scraped(data);
      }
    });
  };

  usage = function() {
    return printLine(BANNER);
  };

}).call(this);
